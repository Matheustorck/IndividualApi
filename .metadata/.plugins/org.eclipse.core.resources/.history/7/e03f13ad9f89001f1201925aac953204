package br.org.serratec.biblioteca.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.org.serratec.biblioteca.domain.Livro;
import br.org.serratec.biblioteca.repository.LivroRepository;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/livros")

public class LivroController {

	@Autowired
	private LivroRepository livroRepository;

	@GetMapping
	public List<Livro> listar() {
		return livroRepository.findAll();
	}

	@GetMapping("/{id}")
	
	public ResponseEntity<Livro> pesquisar(@PathVariable Long id) {
		Optional<Livro> livroOpt = livroRepository.findById(id);
		if (livroOpt.isPresent()) {
			Livro livro = livroOpt.get();
			return ResponseEntity.ok(livro);
		}
		return ResponseEntity.notFound().build();
	}


	@PostMapping
	public Livro inserir(@Valid @RequestBody Livro livro) {
		return livroRepository.save(livro);
	}

	@PutMapping("/{id}")
	public ResponseEntity<Livro> atualizar(@PathVariable Long id, @Valid @RequestBody Livro livroAtualizado) {
		if (!livroRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		livroAtualizado.setId(id);
		livroRepository.save(livroAtualizado);
		return ResponseEntity.ok(livroAtualizado);
		
//		return livroRepository.findById(id).map(livro -> {
//			livro.setTitulo(livroAtualizado.getTitulo());
//			livro.setQtdPaginas(livroAtualizado.getQtdPaginas());
//			livro.setAutor(livroAtualizado.getAutor());
//			livro.setDataPublicacao(livroAtualizado.getDataPublicacao());
//			livro.setEditora(livroAtualizado.getEditora());
//			Livro atualizado = livroRepository.save(livro);
//			return ResponseEntity.ok(atualizado);
//		}).orElse(ResponseEntity.notFound().build());
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> remover(@PathVariable Long id) {
		if (!livroRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		livroRepository.deleteById(id);
		return ResponseEntity.noContent().build();
	}
//		return livroRepository.findById(id).map(livro -> {
//			livroRepository.delete(livro);
//			return ResponseEntity.noContent().build();
//		}).orElse(ResponseEntity.notFound().build());
//	}

}
